from pancovcorrect import uncorrected_path, kmerfiltering, asm2gfa, select_kmer_input

rule count_kmer:
    input:
        reads = lambda wcs: uncorrected_path(wcs, config),

    output:
        db_pre = f"{config['working_dir']}/kmersets/{{k}}/{{filename}}.kmc_pre",
        db_suf = f"{config['working_dir']}/kmersets/{{k}}/{{filename}}.kmc_suf",
        kmer_count = f"{config['working_dir']}/kmersets/{{k}}/{{filename}}.tsv",

    params:
        prefix = f"{config['working_dir']}/kmersets/{{k}}/{{filename}}",
        work_dir = lambda wcs: f"{config['working_dir']}/kmc_workdir/{wcs.k}_{wcs.filename}",

    log:
        f"{config['working_dir']}/logs/count_kmer/{{k}}/{{filename}}.log"

    threads:
        config['max_threads']

    shell:
        """
        mkdir -p {params.work_dir}
        kmc -b -k{wildcards.k} -t{threads} -r -fa {input.reads} {params.prefix} {params.work_dir} &> {log}
        kmc_dump {params.prefix} {output.kmer_count} &> {log}
        """


rule select_kmer:
    input:
        unpack(lambda _: select_kmer_input(config))
    
    output:
        f"{config['working_dir']}/kmersets/{{k}}/{{id}}.filtred.fasta",

    log:
        f"{config['working_dir']}/logs/select_kmer/{{k}}/{{id}}.log"

    run:
        kmerfiltering(input, output[0], **config)


rule asm_kmers:
    input:
        kmerset = f"{config['working_dir']}/kmersets/{{k}}/{{id}}.filtred.fasta",

    output:
        asm = f"{config['working_dir']}/asm/{{k}}/{{id}}.unitigs.fa",

    params:
        outprefix = f"{config['working_dir']}/asm/{{k}}/{{id}}",

    log:
        f"{config['working_dir']}/logs/asm_kmers/{{k}}/{{id}}.log"

    threads:
        config['max_threads']

    shell:
        "bcalm -in {input.kmerset} -abundance-min 1 -kmer-size {wildcards.k} -repartition-type 1 -minimizer-type 1 -nb-cores {threads} -out {params.outprefix} &> {log}"


rule asm2graph:
    input:
        asm = f"{config['working_dir']}/asm/{{k}}/{{id}}.unitigs.fa",

    output:
        graph = f"{config['working_dir']}/graph/{{k}}/{{id}}.gfa",

    log:
        f"{config['working_dir']}/logs/asm2graph/{{k}}/{{id}}.log"

    run:
        asm2gfa(input[0], output[0], int(wildcards.k))


rule correct:
    input:
        reads = lambda wcs: uncorrected_path(wcs, config),
        graph = f"{config['working_dir']}/graph/{{k}}/{{id}}.gfa",
        
    output:
        alignment = f"{config['working_dir']}/reads/{{k}}/{{id}}.gaf",
        corrected = f"{config['working_dir']}/reads/{{k}}/{{id}}.fasta",

    log:
        f"{config['working_dir']}/logs/correct/{{k}}/{{id}}.log"

    threads:
        config['max_threads']

    shell:
        "GraphAligner -t {threads} -g {input.graph} -f {input.reads} --alignments-out {output.alignment} --corrected-out {output.corrected} -x dbg --seeds-minimizer-length {wildcards.k} &> {log}"


rule generate_input:
    input:
        lambda wcs: f"{config['inputs'][int(wcs.id)]}"

    output:
        f"{config['working_dir']}/reads/raw/{{id}}.fasta",

    shell:
        "seqtk seq -A {input} > {output}"


rule generate_ref_input:
    input:
        config['reference']

    output:
        f"{config['working_dir']}/reads/{{raw}}/reference.fasta"

    shell:
        "seqtk seq -A {input} > {output}"

        
rule generate_output:
    input:
        [f"{config['working_dir']}/reads/{config['kmer_sizes'][-1]}/{index}.fasta" for index in range(len(config["outputs"]))]

    output:
        config["outputs"]

    run:
        for (in_path, out_path) in zip(input, output):
            shell("cp {in_path} {out_path}")


rule all:
    input:
        config["outputs"]


wildcard_constraints:
    id = "\d+"
